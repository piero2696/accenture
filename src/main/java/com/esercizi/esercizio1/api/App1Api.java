/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.esercizi.esercizio1.api;

import com.esercizi.esercizio1.dto.ItemDto;
import com.esercizi.esercizio1.entity.Item;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-06T11:58:09.548032500+01:00[Europe/Rome]")
@Validated
@Tag(name = "app1", description = "the app1 API")
public interface App1Api {

    /**
     * POST /app1/newItems : Creare un nuovo item
     *
     * @param itemDto (required)
     * @return Item creato (status code 201)
     */
    @Operation(
        operationId = "createItem",
        summary = "Creare un nuovo item",
        responses = {
            @ApiResponse(responseCode = "201", description = "Item creato")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/app1/newItems",
        consumes = { "application/json" }
    )
    ResponseEntity<ItemDto> createItem(
        @Parameter(name = "ItemDto", description = "", required = true) @Valid @RequestBody ItemDto itemDto
    );


    /**
     * DELETE /app1/deleteItem
     *
     * @param itemId ID of the item to retrieve (required)
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "deleteItem",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ItemDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/app1/deleteItem",
        produces = { "application/json" }
    )
    ResponseEntity<ItemDto> deleteItem(
        @NotNull @Parameter(name = "itemId", description = "ID of the item to retrieve", required = true) @Valid @RequestParam(value = "itemId", required = true) Integer itemId
    );


    /**
     * GET /app1/items : Ottieni una lista di items
     *
     * @return Successful operation, this is a list (status code 200)
     */
    @Operation(
        operationId = "getItems",
        summary = "Ottieni una lista di items",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation, this is a list", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ItemDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/app1/items",
        produces = { "application/json" }
    )
    List<Item> getItems(
        
    );


    /**
     * PUT /app1/updateItem : Updates an existing one
     *
     * @param itemDto  (required)
     * @return Item aggiornato (status code 201)
     */
    @Operation(
        operationId = "updateItem",
        summary = "Updates an existing one",
        responses = {
            @ApiResponse(responseCode = "201", description = "Item aggiornato")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/app1/updateItem",
        consumes = { "application/json" }
    )
    ResponseEntity<Void> updateItem(
        @Parameter(name = "ItemDto", description = "", required = true) @Valid @RequestBody ItemDto itemDto
    );

}
